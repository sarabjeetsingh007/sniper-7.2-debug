//Sarabjeet: [Calculate number of reads issued after refresh period expired] Records the number of times Reads are issued after Refresh Period has expired (L*.ReadsAfterRefreshPeriod)
//(Changes mostly in common/core/memory_subsystem/parametric_dram_directory_msi/cache_cntlr.*)

//Sarabjeet: [Calculate dissimilarity between consecutive writes] NOTE: Works only for 64 Bytes Cachelines
//NOTE: Does not record conflict writes. Doesn't consider multiple ways.
//(Changes mostly in common/core/memory_subsystem/parametric_dram_directory_msi/cache_cntlr.*)

//Sarabjeet: [Calculate dissimilarity between consecutive writes - Cache Level]
//(Changes mostly in common/core/memory_subsystem/cache/cache.*)

//Sarabjeet: [Print Cache Writes - Data] FORMAT: "Address CachelineData(64bytes)"
//TODO: Create different files for different core, in case of private caches
//(Changes mostly in common/core/memory_subsystem/parametric_dram_directory_msi/cache_cntlr.*)

//Sarabjeet: [Print Cache Activity] FORMAT: "Address timestamp ACTION"; (ACTION: 0=Read, 1=Write, 3=Invalidate)
//TODO: Create different files for different core, in case of private caches
//(Changes mostly in common/core/memory_subsystem/parametric_dram_directory_msi/cache_cntlr.*)

Cloned from http://snipersim.org/download/b33829bc3c820d29/git/sniper.git

This is the source code for the Sniper multicore simulator developed
by the Performance Lab research group at Ghent University, Belgium.
Please refer to the NOTICE file in the top level directory for
licensing and copyright information.

For the latest version of the software or additional information, please
see our website:

http://snipersim.org

If you are using Sniper, please let us know by posting a message on
our user forum.  If you use Sniper 6.0 or later in your research,
(if you are using the Instruction-Window Centric core model, etc.),
please acknowledge us by referencing our TACO 2014 paper:

Trevor E. Carlson, Wim Heirman, Stijn Eyerman, Ibrahim Hur, Lieven
Eeckhout, "An Evaluation of High-Level Mechanistic Core Models".
In ACM Transactions on Architecture and Code Optimization (TACO),
Volume 11, Issue 3, October 2014, Article No. 28
http://dx.doi.org/10.1145/2629677

If you are using earlier versions of Sniper, please acknowledge
us by referencing our SuperComputing 2011 paper:

Trevor E. Carlson, Wim Heirman, Lieven Eeckhout, "Sniper: Exploring
the Level of Abstraction for Scalable and Accurate Parallel Multi-Core
Simulation". Proceedings of the International Conference for High
Performance Computing, Networking, Storage and Analysis (SC),
pages 52:1--52:12, November 2011.
http://dx.doi.org/10.1145/2063384.2063454
